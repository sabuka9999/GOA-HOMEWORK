#1
#SyntaxError: გამოჩნდება, როდესაც Python-ის სინტაქსში ან ფორმატში შეცდომა ხდება. მაგალითად, თუ სწორად არ დავწერთ ფუნქციის ზარს ან შეცდომა გვექნება პუნქტუაციაში.

#მაგალითი: print("Hello world'
#IndentationError: გამოჩნდება, როდესაც დასაწყისში (indentation) ადგილი არ არის წესით.

#NameError: მოხდება, როდესაც პროგრამაში ცვლადი ან ფუნქცია ან სხვა ობიექტი გამოჩნდება, რომელიც ჯერ არ არის დეფინირებული.

#მაგალითი: print(unknown_variable)
#IndexError: როდესაც ჩამონათვალის ან სიის ინდექსი არის არასწორი (მაგალითად, სიის ზომაზე დიდი).

#მაგალითი: my_list = [1, 2, 3]; print(my_list[5])
#ValueError: როდესაც ფუნქციას ან ოპერაციას გადაეცემა გაუმართავი მნიშვნელობა.

#მაგალითად, თუ ციფრის ადგილას სტრიქონი გადავცემთ, რომლის კონვერტაციაც შეუძლებელია.
#მაგალითი: int("abc")
#TypeError: როდესაც ვცდილობთ ორი სხვადასხვა ტიპის მონაცემების ოპერაციას. მაგალითად, არ შეგვიძლია სტრიქონისა და რიცხვის დამატება.

#მაგალითი: "Hello" + 5

#2
try:
    print(unknown_variable)
except NameError as i:
    print(f"Caught an error: {i}")

#3
my_list = [1, 2, 3]
try:
    print(my_list[5])
except IndexError as i:
    print(f"Caught an error: {i}")

#4
try:
    number = int("abc")
except ValueError as i:
    print(f"Caught an error: {i}")

#5
#try/except-ის ბლოკი Python-ში გამოიყენება, რათა დავიცვათ პროგრამის ფუნქციონალობა და თავიდან ავიცილოთ მისი გაჩერება შეცდომის გამო.

#try ბლოკი შეიცავს კოდს, რომელიც შესაძლოა გამოიწვიოს შეცდომა.
#except ბლოკი დაიჭერს ამ შეცდომას, სანამ პროგრამა არ გაიხეთქება და მომხმარებელს შესთავაზებს შესაბამის შეტყობინებას.



